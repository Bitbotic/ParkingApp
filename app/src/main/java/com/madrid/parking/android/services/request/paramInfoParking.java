package com.madrid.parking.android.services.request;

//------------------------------------------------------------------------------
// <wsdl2code-generated>
//    This code was generated by http://www.wsdl2code.com version  2.6
//
// Date Of Creation: 9/14/2015 2:13:24 PM
//    Please dont change this code, regeneration will override your changes
//</wsdl2code-generated>
//
//------------------------------------------------------------------------------
//
//This source code was auto-generated by Wsdl2Code  Version
//

import com.madrid.parking.android.model.coordinate;
import com.madrid.parking.android.model.minimumPlacesAvailable;
import com.madrid.parking.android.model.nameFieldParkingCodes;

import com.madrid.parking.android.model.TFamilyTTypeTCategory;

import org.ksoap2.serialization.KvmSerializable;

import org.ksoap2.serialization.PropertyInfo;

import java.util.Hashtable;

import org.ksoap2.serialization.SoapObject;
import org.ksoap2.serialization.SoapPrimitive;

public class paramInfoParking implements KvmSerializable {

    public TFamilyTTypeTCategory tFamilyTTypeTCategory;
    public com.madrid.parking.android.model.coordinate coordinate;
    //public Date dateTimeUse;
    public String dateTimeUse;
    public boolean dateTimeUseSpecified;
    public String language;
    public com.madrid.parking.android.model.minimumPlacesAvailable minimumPlacesAvailable;
    public nameFieldParkingCodes nameFieldCodes;
    public String radius;

    public paramInfoParking() {
    }

    public paramInfoParking(SoapObject soapObject) {
        if (soapObject == null)
            return;
        if (soapObject.hasProperty("TFamilyTTypeTCategory")) {
            SoapObject j = (SoapObject) soapObject.getProperty("TFamilyTTypeTCategory");
            tFamilyTTypeTCategory = new TFamilyTTypeTCategory(j);

        }

        if (soapObject.hasProperty("coordinate")) {
            SoapObject j = (SoapObject) soapObject.getProperty("coordinate");
            coordinate = new coordinate(j);

        }
        if (soapObject.hasProperty("dateTimeUse")) {
            Object obj = soapObject.getProperty("dateTimeUse");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                dateTimeUse = j.toString();
                //String a = j.toString();
                /*
                DateFormat sdf = new SimpleDateFormat("yyyy-mm-dd'T'hh:mm:ss");

                try {

                    dateTimeUse = sdf.parse(a);
                } catch (ParseException e) {
                    e.printStackTrace();
                }*/

            } else if (obj != null && obj instanceof String) {
                dateTimeUse = (String) obj;
                /*
                String a = (String) obj;
                DateFormat sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss");

                try {
                    dateTimeUse = sdf.parse(a);
                } catch (ParseException e) {
                    e.printStackTrace();
                }*/
            }


            /*
            PropertyInfo req = new PropertyInfo();
            req.name="dateTimeUse";// may be different in your case
            req.type=String.class;
            req.setValue("<dateTimeUse xmlns=\"http://schemas.datacontract.org/2004/07/InfoParking\">2015-08-23T00:00:00</dateTimeUse>");
            */

            /*
            Calendar cal = Calendar.getInstance();
            Date currentLocalTime = cal.getTime();
            String lFormatTemplate = "yyyy-MM-dd'T'hh:mm:ss";
            DateFormat lDateFormat = new SimpleDateFormat(lFormatTemplate);
            //dateTimeUse = lDateFormat.format(currentLocalTime);

            PropertyInfo pi21 = new PropertyInfo();
            pi21.setName("dateTimeUse");
            pi21.setValue(lDateFormat.format(currentLocalTime));
            pi21.setType(MarshalDate.class);
            */
        }

        if (soapObject.hasProperty("dateTimeUseSpecified")) {
            Object obj = soapObject.getProperty("dateTimeUseSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                dateTimeUseSpecified = Boolean.parseBoolean(j.toString());
            } else if (obj != null && obj instanceof Boolean) {
                dateTimeUseSpecified = (Boolean) obj;
            }
        }

        if (soapObject.hasProperty("language")) {
            Object obj = soapObject.getProperty("language");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                language = j.toString();
            } else if (obj != null && obj instanceof String) {
                language = (String) obj;
            }
        }
        if (soapObject.hasProperty("minimumPlacesAvailable")) {
            SoapObject j = (SoapObject) soapObject.getProperty("minimumPlacesAvailable");
            minimumPlacesAvailable = new minimumPlacesAvailable(j);

        }
        if (soapObject.hasProperty("nameFieldCodes")) {
            SoapObject j = (SoapObject) soapObject.getProperty("nameFieldCodes");
            nameFieldCodes = new nameFieldParkingCodes(j);

        }
        if (soapObject.hasProperty("radius")) {
            Object obj = soapObject.getProperty("radius");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                radius = j.toString();
            } else if (obj != null && obj instanceof String) {
                radius = (String) obj;
            }
        }
    }

    @Override
    public Object getProperty(int arg0) {
        switch (arg0) {
            case 0:
                return tFamilyTTypeTCategory;
            case 1:
                return coordinate;
            case 2:
                //DateFormat sdf = new SimpleDateFormat("yyyy-mm-dd'T'hh:mm:ss");
                //String a = sdf.format(dateTimeUse);
                return dateTimeUse;
            /*
            case 3:
                return dateTimeUseSpecified;*/

            case 3:
                return language;
            case 4:
                return minimumPlacesAvailable;
            case 5:
                return nameFieldCodes;
            case 6:
                return radius;
        }
        return null;
    }

    @Override
    public int getPropertyCount() {
        return 7;
    }

    @Override
    public void getPropertyInfo(int index, @SuppressWarnings("rawtypes") Hashtable arg1, PropertyInfo info) {
        switch (index) {
            case 0:
                info.type = TFamilyTTypeTCategory.class;
                info.name = "TFamilyTTypeTCategory";
                info.setNamespace("http://schemas.datacontract.org/2004/07/InfoParking");
                break;
            case 1:
                info.type = coordinate.class;
                info.name = "coordinate";
                info.setNamespace("http://schemas.datacontract.org/2004/07/InfoParking");
                break;
            case 2:
                //info.type = PropertyInfo.STRING_CLASS;
                info.type = String.class;
                info.name = "dateTimeUse";
                info.setNamespace("http://schemas.datacontract.org/2004/07/InfoParking");
                break;
            /*
            case 3:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "dateTimeUseSpecified";
                info.setNamespace("http://schemas.datacontract.org/2004/07/InfoParking");
                break;*/

            case 3:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "language";
                info.setNamespace("http://schemas.datacontract.org/2004/07/InfoParking");
                break;
            case 4:
                info.type = minimumPlacesAvailable.class;
                info.name = "minimumPlacesAvailable";
                info.setNamespace("http://schemas.datacontract.org/2004/07/InfoParking");
                break;
            case 5:
                info.type = nameFieldParkingCodes.class;
                info.name = "nameFieldCodes";
                info.setNamespace("http://schemas.datacontract.org/2004/07/InfoParking");
                break;
            case 6:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "radius";
                info.setNamespace("http://schemas.datacontract.org/2004/07/InfoParking");
                break;
        }
    }


    public String getInnerText() {
        return null;
    }


    public void setInnerText(String s) {
    }


    @Override
    public void setProperty(int arg0, Object arg1) {
    }

}
