package com.madrid.parking.android.model;

//------------------------------------------------------------------------------
// <wsdl2code-generated>
//    This code was generated by http://www.wsdl2code.com version  2.6
//
// Date Of Creation: 9/14/2015 2:13:24 PM
//    Please dont change this code, regeneration will override your changes
//</wsdl2code-generated>
//
//------------------------------------------------------------------------------
//
//This source code was auto-generated by Wsdl2Code  Version
//

import org.ksoap2.serialization.KvmSerializable;
import org.ksoap2.serialization.PropertyInfo;

import java.util.Hashtable;

import org.ksoap2.serialization.SoapObject;
import org.ksoap2.serialization.SoapPrimitive;

public class occupation implements KvmSerializable {

    public String code;
    public int free;
    public boolean freeSpecified;
    public String moment;
    public boolean momentSpecified;
    public String name;
    public double renewalIndex;
    public boolean renewalIndexSpecified;

    public occupation() {
    }

    public occupation(SoapObject soapObject) {
        if (soapObject == null)
            return;
        if (soapObject.hasProperty("code")) {
            Object obj = soapObject.getProperty("code");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                code = j.toString();
            } else if (obj != null && obj instanceof String) {
                code = (String) obj;
            }
        }
        if (soapObject.hasProperty("free")) {
            Object obj = soapObject.getProperty("free");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                free = Integer.parseInt(j.toString());
            } else if (obj != null && obj instanceof Number) {
                free = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("freeSpecified")) {
            Object obj = soapObject.getProperty("freeSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                freeSpecified = Boolean.parseBoolean(j.toString());
            } else if (obj != null && obj instanceof Boolean) {
                freeSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("moment")) {
            Object obj = soapObject.getProperty("moment");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                moment = j.toString();
            } else if (obj != null && obj instanceof String) {
                moment = (String) obj;
            }
        }
        if (soapObject.hasProperty("momentSpecified")) {
            Object obj = soapObject.getProperty("momentSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                momentSpecified = Boolean.parseBoolean(j.toString());
            } else if (obj != null && obj instanceof Boolean) {
                momentSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("name")) {
            Object obj = soapObject.getProperty("name");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                name = j.toString();
            } else if (obj != null && obj instanceof String) {
                name = (String) obj;
            }
        }
        if (soapObject.hasProperty("renewalIndex")) {
            Object obj = soapObject.getProperty("renewalIndex");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                renewalIndex = Double.parseDouble(j.toString());
            } else if (obj != null && obj instanceof Number) {
                renewalIndex = (Double) obj;
            }
        }
        if (soapObject.hasProperty("renewalIndexSpecified")) {
            Object obj = soapObject.getProperty("renewalIndexSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                renewalIndexSpecified = Boolean.parseBoolean(j.toString());
            } else if (obj != null && obj instanceof Boolean) {
                renewalIndexSpecified = (Boolean) obj;
            }
        }
    }

    @Override
    public Object getProperty(int arg0) {
        switch (arg0) {
            case 0:
                return code;
            case 1:
                return free;
            case 2:
                return freeSpecified;
            case 3:
                return moment;
            case 4:
                return momentSpecified;
            case 5:
                return name;
            case 6:
                return renewalIndex;
            case 7:
                return renewalIndexSpecified;
        }
        return null;
    }

    @Override
    public int getPropertyCount() {
        return 8;
    }

    @Override
    public void getPropertyInfo(int index, @SuppressWarnings("rawtypes") Hashtable arg1, PropertyInfo info) {
        switch (index) {
            case 0:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "code";
                break;
            case 1:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "free";
                break;
            case 2:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "freeSpecified";
                break;
            case 3:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "moment";
                break;
            case 4:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "momentSpecified";
                break;
            case 5:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "name";
                break;
            case 6:
                info.type = Double.class;
                info.name = "renewalIndex";
                break;
            case 7:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "renewalIndexSpecified";
                break;
        }
    }


    public String getInnerText() {
        return null;
    }


    public void setInnerText(String s) {
    }


    @Override
    public void setProperty(int arg0, Object arg1) {
    }

}
