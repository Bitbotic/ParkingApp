package com.madrid.parking.android.model;

//------------------------------------------------------------------------------
// <wsdl2code-generated>
//    This code was generated by http://www.wsdl2code.com version  2.6
//
// Date Of Creation: 9/14/2015 2:13:24 PM
//    Please dont change this code, regeneration will override your changes
//</wsdl2code-generated>
//
//------------------------------------------------------------------------------
//
//This source code was auto-generated by Wsdl2Code  Version
//

import org.ksoap2.serialization.KvmSerializable;
import org.ksoap2.serialization.PropertyInfo;

import java.util.Hashtable;

import org.ksoap2.serialization.SoapObject;
import org.ksoap2.serialization.SoapPrimitive;

public class iconsDescription implements KvmSerializable {

    public String classificationField;
    public String classificationTranslatedField;
    public String description;
    public String iconName;
    public String urlIcon;

    public iconsDescription() {
    }

    public iconsDescription(SoapObject soapObject) {
        if (soapObject == null)
            return;
        if (soapObject.hasProperty("classification")) {
            Object obj = soapObject.getProperty("classification");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                classificationField = j.toString();
            } else if (obj != null && obj instanceof String) {
                classificationField = (String) obj;
            }
        }
        if (soapObject.hasProperty("classificationTranslated")) {
            Object obj = soapObject.getProperty("classificationTranslated");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                classificationTranslatedField = j.toString();
            } else if (obj != null && obj instanceof String) {
                classificationTranslatedField = (String) obj;
            }
        }
        if (soapObject.hasProperty("description")) {
            Object obj = soapObject.getProperty("description");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                description = j.toString();
            } else if (obj != null && obj instanceof String) {
                description = (String) obj;
            }
        }
        if (soapObject.hasProperty("iconName")) {
            Object obj = soapObject.getProperty("iconName");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                iconName = j.toString();
            } else if (obj != null && obj instanceof String) {
                iconName = (String) obj;
            }
        }
        if (soapObject.hasProperty("urlIcon")) {
            Object obj = soapObject.getProperty("urlIcon");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                urlIcon = j.toString();
            } else if (obj != null && obj instanceof String) {
                urlIcon = (String) obj;
            }
        }
    }

    @Override
    public Object getProperty(int arg0) {
        switch (arg0) {
            case 0:
                return classificationField;
            case 1:
                return classificationTranslatedField;
            case 2:
                return description;
            case 3:
                return iconName;
            case 4:
                return urlIcon;
        }
        return null;
    }

    @Override
    public int getPropertyCount() {
        return 5;
    }

    @Override
    public void getPropertyInfo(int index, @SuppressWarnings("rawtypes") Hashtable arg1, PropertyInfo info) {
        switch (index) {
            case 0:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "classification";
                break;
            case 1:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "classificationTranslated";
                break;
            case 2:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "description";
                break;
            case 3:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "iconName";
                break;
            case 4:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "urlIcon";
                break;
        }
    }


    public String getInnerText() {
        return null;
    }


    public void setInnerText(String s) {
    }


    @Override
    public void setProperty(int arg0, Object arg1) {
    }

}
